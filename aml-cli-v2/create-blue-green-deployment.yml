# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: deployment_file
  type: string
- name: enable_monitoring
  type: string
  default: 'false'

steps:
    - task: Bash@3
      displayName: Check Deployments
      continueOnError: true
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            az login --service-principal -u <sp-id> -p <sp-pass> --tenant <tenant-id>
            az ml $(endpoint_type)-endpoint show --name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace)  --output json > at.json

    - task: Bash@3
      displayName:  Assign Deployments to Variables
      continueOnError: true
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            echo "##vso[task.setvariable variable=blue]$(jq '.traffic.blue' at.json)"
            echo "##vso[task.setvariable variable=green]$(jq '.traffic.green' at.json)"

    - task: Bash@3
      displayName: Print Deployments
      continueOnError: true
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            echo "Blue=$(blue)"
            echo "Green=$(green)"

    - task: Bash@3
      displayName: Create First Deployment
      continueOnError: true
      condition: and(eq(variables.green, 'null'), eq(variables.blue, 'null'))
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            az ml $(endpoint_type)-deployment create --file ${{parameters.deployment_file}} --resource-group $(resource_group) --workspace-name $(aml_workspace) --endpoint $(endpoint_name) --name blue 
            az ml $(endpoint_type)-endpoint update --name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace) --traffic "blue=100 green=0"

    - task: Bash@3
      displayName: Create Blue Deployment
      continueOnError: true
      condition: eq(variables.green, 100)
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            az ml $(endpoint_type)-deployment create --file ${{parameters.deployment_file}} --resource-group $(resource_group) --workspace-name $(aml_workspace) --endpoint $(endpoint_name) --name blue
            az ml $(endpoint_type)-endpoint update --name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace) --traffic "blue=100 green=0"
            az ml $(endpoint_type)-deployment delete --endpoint-name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace) --name green --yes

    - task: Bash@3
      displayName: Create Green Deployment
      continueOnError: true
      condition: eq(variables.blue, 100)
      inputs: 
        azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
        targetType: inline
        script: |
            az ml $(endpoint_type)-deployment create --file ${{parameters.deployment_file}} --resource-group $(resource_group) --workspace-name $(aml_workspace) --endpoint $(endpoint_name) --name green
            az ml $(endpoint_type)-endpoint update --name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace) --traffic "blue=0 green=100"
            az ml $(endpoint_type)-deployment delete --endpoint-name $(endpoint_name) --resource-group $(resource_group) --workspace-name $(aml_workspace) --name blue --yes